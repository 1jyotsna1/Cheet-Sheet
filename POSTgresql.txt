Server [localhost]:
Database [postgres]:
Port [5432]:
Username [postgres]:
Password for user postgres:
psql (12.2)
WARNING: Console code page (437) differs from Windows code page (1252)
         8-bit characters might not work correctly. See psql reference
         page "Notes for Windows users" for details.
Type "help" for help.

postgres=# \l
                                         List of databases
   Name    |  Owner   | Encoding |      Collate       |       Ctype        |   Access privileges
-----------+----------+----------+--------------------+--------------------+-----------------------
 postgres  | postgres | UTF8     | English_India.1252 | English_India.1252 |
 template0 | postgres | UTF8     | English_India.1252 | English_India.1252 | =c/postgres          +
           |          |          |                    |                    | postgres=CTc/postgres
 template1 | postgres | UTF8     | English_India.1252 | English_India.1252 | =c/postgres          +
           |          |          |                    |                    | postgres=CTc/postgres
 test      | postgres | UTF8     | English_India.1252 | English_India.1252 |
(4 rows)


postgres=# psql -h localhost -p 5432 -U postgres test



CREATE TABLE table_name(
	Column name + data type + constraints if any
)

test=# \c test
You are now connected to database "test" as user "postgres".
test=# CREATE TABLE person(
test(# id INT,
test(# first_name VARCHAR(50),
test(# last_name VARCHAR(50),
test(# gender VARCHAR(7),
test(# date_of_birth DATE);
CREATE TABLE
test=# \d
         List of relations
 Schema |  Name  | Type  |  Owner
--------+--------+-------+----------
 public | person | table | postgres
(1 row)


test=# \d person
                         Table "public.person"
    Column     |         Type          | Collation | Nullable | Default
---------------+-----------------------+-----------+----------+---------
 id            | integer               |           |          |
 first_name    | character varying(50) |           |          |
 last_name     | character varying(50) |           |          |
 gender        | character varying(7)  |           |          |
 date_of_birth | date                  |           |          |





test=# CREATE TABLE person(
test(# id BIGSERIAL NOT NULL PRIMARY KEY,
test(# first_name VARCHAR(50) NOT NULL,
test(# last_name VARCHAR(50) NOT NULL,
test(# gender VARCHAR(7) NOT NULL,
test(# date_of_birth DATE NOT NULL,
test(# email VARCHAR(150) );
CREATE TABLE
test=# \d
              List of relations
 Schema |     Name      |   Type   |  Owner
--------+---------------+----------+----------
 public | person        | table    | postgres
 public | person_id_seq | sequence | postgres
(2 rows)


test=# \d person
                                       Table "public.person"
    Column     |          Type          | Collation | Nullable |              Default
---------------+------------------------+-----------+----------+------------------------------------
 id            | bigint                 |           | not null | nextval('person_id_seq'::regclass)
 first_name    | character varying(50)  |           | not null |
 last_name     | character varying(50)  |           | not null |
 gender        | character varying(7)   |           | not null |
 date_of_birth | date                   |           | not null |
 email         | character varying(150) |           |          |
Indexes:
    "person_pkey" PRIMARY KEY, btree (id)


INSERT INTO person (
   first_name,
   last_name,
   gender,
   date_of_birth,
   email)
VALUES('Name','LastName','Gender', DATE '2020-01-10', 'xyz@gmail.com');

test=# INSERT INTO person (first_name, last_name, gender, date_of_birth)
test-# VALUES('A','B','MALE', date '2020-01-01');
INSERT 0 1
test=# INSERT INTO person (first_name, last_name, gender, date_of_birth)
test-# VALUES('C','D','MALE', date '2020-01-01','jake@gmail.com');
ERROR:  INSERT has more expressions than target columns
LINE 2: VALUES('C','D','MALE', date '2020-01-01','jake@gmail.com');
                                                 ^
test=# INSERT INTO person (first_name, last_name, gender, date_of_birth,email)
test-# VALUES('C','D','MALE', date '2020-01-01','jake@gmail.com');
INSERT 0 1
test=#

test-# SELECT * FROM person;
ERROR:  syntax error at or near "SELECT"
LINE 2: SELECT * FROM person;
        ^
test=# SELECT* FROM person;
 id | first_name | last_name | gender | date_of_birth |     email
----+------------+-----------+--------+---------------+----------------
  1 | A          | B         | MALE   | 2020-01-01    |
  2 | C          | D         | MALE   | 2020-01-01    | jake@gmail.com
(2 rows)


test=# \i C:/Users/Jyotsna/Downloads/person.sql


SELECT * FROM person ORDER BY country_of_birth ASC;
SELECT 1=1;

SELECT * FROM person OFFSET 5
SELECT * FROM person OFFSET 5 LIMIT 5
SELECT * FROM person OFFSET 5 FETCH FIRST 5 ROW ONLY
SELECT * FROM person WHERE country_of_birth='China' OR country_of_birth='France'
SELECT * FROM person WHERE country_of_birth IN ('China','France')
SELECT * FROM person WHERE date_of_birth BETWEEN DATE '2015-01-01' AND '2016-01-01'

SELECT * FROM person WHERE email LIKE %.com
SELECT * FROM person WHERE email LIKE '_____@'
SELECT * FROM person WHERE country_of_birth LIKE 'P%'
SELECT DISTINCT country_of_birth FROM person
SELECT country_of_birth FROM person GROUP BY country_of_birth
SELECT country_of_birth, COUNT(*) FROM person GROUP BY country_of_birth
SELECT country_of_birth, COUNT(*) FROM person GROUP BY country_of_birth ORDER BY country_of_birth
SELECT country_of_birth, COUNT(*) FROM person GROUP BY country_of_birth HAVING COUNT(*) > 5 ORDER BY country_of_birth

SELECT MAX(price) FROM car
SELECT MIN(price) FROM car
SELECT AVG(price) FROM car
SELECT ROUND(AVG(price)) FROM car
SELECT make, model, MIN(price) FROM car GROUP BY make,model
SELECT SUM(price) FROM car
SELECT make, SUM(price) FROM car GROUP BY make
SELECT id, make, model, price, price*.10 FROM car
SELECT id, make, model, price, ROUND(price*.10,2), ROUND(price-(price*.10),2) FROM car
SELECT id, make, model, price AS original_price, ROUND(price*.10,2) AS ten_percent, ROUND(price-(price*.10),2) AS discount_after10percent FROM car

SELECT COALESCE(1)
SELECT COALESCE(1) AS number
SELECT COALESCE(email, 'Email not provided') FROM person
SELECT 10/0
SELECT NULLIF(10,10)
SELECT NULLIF(10,100)
SELECT 10/NULLIF(0,0)
SELECT COALESCE(10/NULLIF(0,0),0)

SELECT NOW()
SELECT NOW()::DATE
SELECT NOW()::TIME
SELECT NOW()-INTERVAL '1 YEAR'
SELECT NOW()-INTERVAL '1 MONTHS'
SELECT NOW()+INTERVAL '1 DAYS'
SELECT NOW()::DATE +INTERVAL '1 DAYS'
(SELECT NOW() +INTERVAL '1 DAYS')::DATE
SELECT EXTRACT(YEAR FROM NOW())
SELECT EXTRACT(DOW FROM NOW())
SELECT EXTRACT(CENTURY FROM NOW())

SELECT first_name, last_name, gender, country_of_birth, date_of_birth, AGE(NOW(),date_of_birth) AS age FROM person
SELECT * FROM person LIMIT 1
ALTER TABLE person DROP CONSTRAINT person_pkey
INSERT INTO person (line)
SELECT * FROM person WHERE id=1

ALTER TABLE person ADD PRIMARY KEY (id)
DELETE FROM person WHERE id=1
SELECT * FROM person WHERE id=1
INSERT INTO person (line)

SELECT email, count(*) FROM person GROUP BY email
SELECT email, count(*) FROM person GROUP BY email HAVING COUNT(*)>1
INSERT INTO person (line)
SELECT email, count(*) FROM person GROUP BY email HAVING COUNT(*)>1
ALTER TABLE person ADD CONSTRAINT unique_email_address UNIQUE (email)
DELETE FROM person WHERE id=1

ALTER TABLE person ADD CONSTRAINT unique_email_address UNIQUE (email)
INSERT INTO person (line)
ALTER TABLE person DROP CONSTRAINT unique_email_address

ALTER TABLE person ADD UNIQUE(email)

SELECT DISTINCT gender FROM person   (Change a gender to anything absurd on one line)
ALTER TABLE person ADD CONSTRAINT gender_constraint CHECK (gender='Female OR gender='Male')
DELETE FROM person WHERE gender='Hello'
ALTER TABLE person ADD CONSTRAINT gender_constraint CHECK (gender='Female OR gender='Male')

(insert the absurd gender line again)


UPDATE person SET email='xyz@gmail.com' WHERE id=2011
SELECT * FROM person WHERE id=2011

UPDATE person SET first_name='Omar', last_name='Montana', email=' ' WHERE id=2011
SELECT * FROM person WHERE id=2011

SELECT * FROM person WHERE id=
INSERT INTO person (id, first_name, last_name, gender, email, date_of_birth, country_of_birth)
Values (2017, 'Russ', 'Ruddoch','Male', ' ', DATE ' ','Norway')

ON CONFLICT(id) DO NOTHING;


INSERT INTO person (id, first_name, last_name, gender, email, date_of_birth, country_of_birth)
Values (2017, 'Russ', 'Ruddoch','Male', ' ', DATE ' ','Norway') ON CONFLICT(id) DO UPDATE SET email = EXCLUDED.email;



UPDATE person SET car_id=1 WHERE id=2;
UPDATE person SET car_id=2 WHERE id=1;
SELECT * FROM person JOIN car ON person.car_id=car.id
SELECT person.first_name, car.make, car.model, car.price FROM person JOIN car ON person.car_id=car.id
SELECT * FROM person LEFT JOIN car ON car.id=person.car_id
SELECT * FROM person WHERE car_id IS NULL
SELECT * FROM person LEFT JOIN car ON car.id=person.car_id WHERE car.* IS NULL



SELECT * FROM person LEFT JOIN ON car.id=person.car_id
\copy (SELECT * FROM person LEFT JOIN ON car.id=person.car_id) TO '/Users.. ' DELIMITER ',' CSV HEADERS
SELECT * FROM person_id_seq
SELECT nextval(   )
ALTER SEQUENCE person_id_seq RESTART WITH 10


SELECT * FROM pg_a
SELECT * FROM pg_available_extensions
CREATE EXTENSION IF NOT EXIST "uuid-ossp"
SELECT * FROM pg_available_extensions

\df
SELECT uuid_generate_v4()


UPDATE person SET car_uid=' ' WHERE person_uid=' '
SELECT * FROM person JOIN car ON person.car_uid=car.car_uid
SELECT * FROM person JOIN car USING (car_uid)
SELECT * FROM person LEFT JOIN car USING (car_uid)
SELECT * FROM person LEFT JOIN car USING (car_uid) WHERE car.* IS NULL














